---
import SectionTitle from "./SectionTitle.astro";

const avancesData = [
  {
    id: 1,
    url: "/images/avances/recurso1.webp",
    title1: "Veredas",
    title2: "y pistas",
  },
  {
    id: 2,
    url: "/images/avances/recurso2.webp",
    title1: "Pòrtico",
    title2: "de ingreso",
  },
  {
    id: 3,
    url: "/images/avances/recurso3.webp",
    title1: "Canchas",
    title2: "Deportivas",
  },
  {
    id: 4,
    url: "/images/avances/recurso4.webp",
    title1: "Alumbrado",
    title2: "público",
  },
  {
    id: 5,
    url: "/images/avances/recurso5.webp",
    title1: "Veredas",
    title2: "y pistas",
  },
];
---

<section
  class="py-16 md:py-20"
  aria-labelledby="avances-title"
  data-aos="fade-up"
  data-aos-once="true"
>
  <main class="container mx-auto px-6 md:px-12">
    <!-- Title Section -->
    <header data-aos="fade-down" data-aos-delay="200" data-aos-once="true">
      <SectionTitle topText="AVANCES" bottomText="DE OBRA" />
      <h2 id="avances-title" class="sr-only">
        Avances de Obra del Condominio El Olivar
      </h2>
    </header>

    <!-- Carousel Container -->
    <section
      class="relative overflow-hidden cursor-grab select-none"
      id="carousel-container"
      role="region"
      aria-label="Carrusel de avances de obra"
      data-aos="fade-up"
      data-aos-delay="400"
      data-aos-once="true"
    >
      <section
        class="flex transition-transform duration-700 ease-in-out"
        id="carousel-track"
        role="group"
        aria-live="polite"
      >
        {
          avancesData.map((item, index) => (
            <article
              class="carousel-slide flex-shrink-0 px-2 md:px-4"
              data-index={index}
              aria-label={`Avance ${index + 1} de ${avancesData.length}: ${item.title1 + " " + item.title2}`}
              data-aos="fade-up"
              data-aos-delay={`${600 + index * 200}`}
              data-aos-once="true"
            >
              <div class="relative group cursor-pointer">
                <figure class="overflow-hidden rounded-3xl shadow-lg mb-6 border-4 border-white transition-all duration-500 hover:shadow-2xl">
                  <img
                    src={item.url}
                    alt={`Imagen de avance de ${item.title1 + " " + item.title2} en el Condominio Apolo`}
                    class="w-full h-64 md:h-72 lg:h-80 object-cover transition-transform duration-500 group-hover:scale-110"
                  />
                  <figcaption class="absolute bottom-0 rounded-b-3xl border-b-4 border-x-4 border-white pb-5 pt-10 left-1/2 w-full transform -translate-x-1/2 bg-gradient-to-t from-[#175e20] to-transparent text-white  transition-all duration-300 ">
                    <h3 class="text-sm md:text-lg lg:text-3xl font-semibold text-center whitespace-nowrap">
                      <strong>{item.title1}</strong> {item.title2}
                    </h3>
                  </figcaption>
                </figure>
              </div>
            </article>
          ))
        }
      </section>
    </section>

    <!-- Dots Indicator -->
    <nav
      class="flex justify-center mt-6 md:mt-8 space-x-2"
      id="dots-container"
      aria-label="Navegación del carrusel"
      data-aos="fade-up"
      data-aos-delay="800"
      data-aos-once="true"
    >
      {
        avancesData.map((item, index) => (
          <button
            class="w-3 h-3 rounded-full transition-all duration-300 dot hover:scale-125 hover:shadow-md"
            data-index={index}
            aria-label={`Ir a imagen ${index + 1}: ${item.title}`}
            type="button"
          />
        ))
      }
    </nav>
  </main>
</section>

<script>
  class AvancesCarousel {
    constructor() {
      this.currentIndex = 0;
      this.track = document.getElementById("carousel-track");
      this.slides = document.querySelectorAll(".carousel-slide");
      this.totalSlides = this.slides.length;
      this.autoPlayInterval = null;
      this.isTransitioning = false;

      this.init();
    }

    init() {
      this.setupSlides();
      this.setupEventListeners();
      this.updateCarousel();
      this.startAutoPlay();
      this.setupTouchHandlers();
    }

    setupSlides() {
      const containerWidth =
        document.getElementById("carousel-container").offsetWidth;
      const slideWidth = containerWidth * 0.6; // Main slide takes 60% width (reducido de 70%)
      const sideSlideWidth = containerWidth * 0.3; // Side slides take 30% width (aumentado de 25%)

      this.slides.forEach((slide, index) => {
        if (window.innerWidth >= 1024) {
          // Desktop
          slide.style.width = slideWidth + "px";
        } else if (window.innerWidth >= 768) {
          // Tablet
          slide.style.width = containerWidth * 0.75 + "px";
        } else {
          // Mobile
          slide.style.width = containerWidth * 0.85 + "px";
        }
      });
    }

    setupEventListeners() {
      document.querySelectorAll(".dot").forEach((dot, index) => {
        dot.addEventListener("click", () => this.goToSlide(index));
      });

      window.addEventListener("resize", () => this.setupSlides());
    }

    updateCarousel() {
      if (this.isTransitioning) return;

      const containerWidth =
        document.getElementById("carousel-container").offsetWidth;
      let translateX;

      if (window.innerWidth >= 1024) {
        // Desktop - center the current slide
        translateX =
          -this.currentIndex * (containerWidth * 0.6) + containerWidth * 0.2;
      } else if (window.innerWidth >= 768) {
        // Tablet
        translateX =
          -this.currentIndex * (containerWidth * 0.75) + containerWidth * 0.125;
      } else {
        // Mobile
        translateX =
          -this.currentIndex * (containerWidth * 0.85) + containerWidth * 0.075;
      }

      this.track.style.transform = `translateX(${translateX}px)`;

      // Update slides opacity and scale
      this.slides.forEach((slide, index) => {
        const isActive = index === this.currentIndex;
        const img = slide.querySelector("img");

        if (window.innerWidth >= 1024) {
          slide.style.opacity = isActive ? "1" : "0.8";
          slide.style.transform = isActive ? "scale(1)" : "scale(0.85)";
        } else {
          slide.style.opacity = isActive ? "1" : "0.6";
          slide.style.transform = "scale(1)";
        }
      });

      // Update dots
      document.querySelectorAll(".dot").forEach((dot, index) => {
        if (index === this.currentIndex) {
          dot.classList.add("bg-primary");
          dot.classList.remove("bg-gray-400");
        } else {
          dot.classList.add("bg-gray-400");
          dot.classList.remove("bg-primary");
        }
      });
    }

    nextSlide() {
      if (this.isTransitioning) return;
      this.currentIndex = (this.currentIndex + 1) % this.totalSlides;
      this.updateCarousel();
      this.restartAutoPlay();
    }

    prevSlide() {
      if (this.isTransitioning) return;
      this.currentIndex =
        (this.currentIndex - 1 + this.totalSlides) % this.totalSlides;
      this.updateCarousel();
      this.restartAutoPlay();
    }

    goToSlide(index) {
      if (this.isTransitioning || index === this.currentIndex) return;
      this.currentIndex = index;
      this.updateCarousel();
      this.restartAutoPlay();
    }

    startAutoPlay() {
      this.autoPlayInterval = setInterval(() => {
        this.nextSlide();
      }, 3000);
    }

    stopAutoPlay() {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval);
      }
    }

    restartAutoPlay() {
      this.stopAutoPlay();
      this.startAutoPlay();
    }

    setupTouchHandlers() {
      let startX = 0;
      let startY = 0;
      let currentX = 0;
      let isDragging = false;

      const carousel = document.getElementById("carousel-container");

      // Touch events for mobile
      carousel.addEventListener(
        "touchstart",
        (e) => {
          startX = e.touches[0].clientX;
          startY = e.touches[0].clientY;
          isDragging = true;
          this.stopAutoPlay();
        },
        { passive: true }
      );

      carousel.addEventListener(
        "touchmove",
        (e) => {
          if (!isDragging) return;
          currentX = e.touches[0].clientX;
        },
        { passive: true }
      );

      carousel.addEventListener(
        "touchend",
        (e) => {
          if (!isDragging) return;
          isDragging = false;

          const diff = startX - currentX;
          const threshold = 50;

          if (Math.abs(diff) > threshold) {
            if (diff > 0) {
              this.nextSlide();
            } else {
              this.prevSlide();
            }
          } else {
            this.restartAutoPlay();
          }
        },
        { passive: true }
      );

      // Mouse drag events for desktop
      let mouseStartX = 0;
      let isMouseDragging = false;

      carousel.addEventListener("mousedown", (e) => {
        mouseStartX = e.clientX;
        isMouseDragging = true;
        this.stopAutoPlay();
        carousel.style.cursor = "grabbing";
        e.preventDefault();
      });

      carousel.addEventListener("mousemove", (e) => {
        if (!isMouseDragging) return;
        e.preventDefault();
      });

      carousel.addEventListener("mouseup", (e) => {
        if (!isMouseDragging) return;
        isMouseDragging = false;
        carousel.style.cursor = "grab";

        const diff = mouseStartX - e.clientX;
        const threshold = 50;

        if (Math.abs(diff) > threshold) {
          if (diff > 0) {
            this.nextSlide();
          } else {
            this.prevSlide();
          }
        } else {
          this.restartAutoPlay();
        }
      });

      carousel.addEventListener("mouseleave", (e) => {
        if (isMouseDragging) {
          isMouseDragging = false;
          carousel.style.cursor = "grab";
          this.startAutoPlay();
        }
      });

      // Pause on hover
      carousel.addEventListener("mouseenter", () => {
        if (!isMouseDragging) {
          carousel.style.cursor = "grab";
          this.stopAutoPlay();
        }
      });

      carousel.addEventListener("mouseleave", () => {
        if (!isMouseDragging) {
          carousel.style.cursor = "default";
          this.startAutoPlay();
        }
      });
    }
  }

  // Initialize carousel when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new AvancesCarousel();
  });
</script>

<style>
  .carousel-slide {
    transition:
      opacity 0.7s ease-in-out,
      transform 0.7s ease-in-out;
  }

  #carousel-track {
    transition: transform 0.7s ease-in-out;
  }

  .dot {
    transition: background-color 0.3s ease;
  }

  @media (max-width: 767px) {
    .carousel-slide {
      transform: scale(1) !important;
    }
  }
</style>
